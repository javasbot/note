1. 闭包场景下使用useCallback的dep还是用useRef缓存呢？
- 使用useCallback的dep频繁重建函数
```
	const fetchData = useCallback(async () => {
		const payload = { };
		const res = await fetch(payload);
		if (res.suc && Array.isArray(res.data)) {
			const newArr = [
				...arr,
				dataItem
			];
			dispatch({
				arr: newArr
			});
		}
	}, [arr]);

```
可以发现，频繁的函数重建会导致频繁的组件重新渲染。
- 使用useRef缓存arr
```
useEffect(() => {
		arrRef.current = arr;
	}, [arr]);

  useEffect(() => {
		idRef.current = id;
	}, [id]);
	

	const fetchData = async () => {
		const payload = {  };
		const res = await url(payload);
		if (res.suc && Array.isArray(res.data)) {
			const newArr = [
				...arrRef.current,
				dataItem
			];
			dispatch({
				arr: newArr
			});
		}
	};
// <Profiler
					// 	id="testCom"
					// 	onRender={(...rest) => {
					// 		console.log('实际渲染毫秒数', rest[2], '估算无优化时毫秒数', rest[3]);
					// 	}}
					// >
```
> 综合对比，还是使用useRef缓存state在update阶段的渲染性能更好
